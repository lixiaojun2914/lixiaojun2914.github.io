[{"content":"Markdown语法笔记 标题语法 # level1 ## level2 ### level3 #### level4 ##### level5 ###### level6 level1 level2 level3 level4 level5 level6 段落语法 段落中间用一个空行将不同的段落分割\nI really like using Markdown. I think I\u0026#39;ll use it to format all of my documents. I really like using Markdown.\nI think I\u0026rsquo;ll use it to format all of my documents.\n换行语法 换行可用两个空格或者html中的\u0026lt;br\u0026gt;进行换行\nFirst line with two space after. And the next line. First line with html tag after.\u0026lt;br\u0026gt; First line with two space after.\nAnd the next line. First line with html tag after.强调语法 **bold text** *italicized text* ***bold and italicized*** ~~delete line~~ bold text\nitalicized text\nbold and italicized\ndelete line\n引用语法 \u0026gt;This is a reference. \u0026gt; ## This is another reference.  This is a reference.\nThis is another reference.  列表语法 有序列表 1. first 2. second 1. third 8. fourth  first second third fourth  无序列表 - first * second + third  first   second   third  任务列表 - [x] first - [ ] second - [ ] third  first second third  列表中添加其他元素 嵌套段落 嵌套段落，应将元素缩进4个空格或一个制表符\n- This is the first item. - This is the second item. Another paragraph below the second item. - This is the third item.  This is the first item. This is the second item.\nAnother paragraph below the second item. This is the third item.  嵌套代码块 嵌套代码块，应将元素缩进8个空格或两个制表符,同时增加一个空行\n1. Open the file. 2. Find the follow block \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Test\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt; 3. Update the title to match.   Open the file.\n  Find the follow block\n \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Test\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt;    Update the title to match.\n  代码语法  要将短语标注为代码，将其包裹在反引号( ` )中 type `nano` type nano 如果代码中包含反引号，将其包裹在双反引号( `` )中 type `` `nano` `` type `nano`  分隔线语法 *** --- ___    链接语法  链接 [Blog](https://lixiaojun2914.github.io \u0026#34;我的博客地址\u0026#34;) Blog 网址和email地址 \u0026lt;https://lixiaojun2914.github.io\u0026gt; \u0026lt;982090951@qq.com\u0026gt; https://lixiaojun2914.github.io\n982090951@qq.com  图片语法 ![This is a image](https://tenfei04.cfp.cn/creative/vcg/800/new/VCG211291536009.jpg \u0026#34;have fun\u0026#34;) \rThis is a image\r\n表格语法 | Syntax | Description | test | | :-------- | :---------: | ---: | | Header | Title | test | | Paragraph | Text | test |    Syntax Description test     Header Title test   Paragraph Text test    围栏代码块 ```json { \u0026#34;test\u0026#34;: 123, \u0026#34;age\u0026#34;: 25 } \\``` { \u0026#34;test\u0026#34;: 123, \u0026#34;age\u0026#34;: 25 } emoji ⛺ 😂 ⛺ 😂\n","date":"2022-01-29T10:04:53+08:00","permalink":"https://lixiaojun2914.github.io/p/markdown/","title":"Markdown笔记"},{"content":"","date":"2022-01-28T21:13:18+08:00","permalink":"https://lixiaojun2914.github.io/p/pytorch/","title":"Pytorch笔记"},{"content":"","date":"2022-01-28T21:13:09+08:00","permalink":"https://lixiaojun2914.github.io/p/matplotlib/","title":"Matplotlib笔记"},{"content":"Numpy笔记 ndarray ndarray的属性 import numpy as np a = np.arange(6).reshape(2, 3) print(a) # 维度 print(f\u0026#39;shape: {a.shape}\u0026#39;) # 轴 print(f\u0026#39;ndim: {a.ndim}\u0026#39;) # 元素大小 print(f\u0026#39;itemsize: {a.itemsize}\u0026#39;) # 元素个数 print(f\u0026#39;size: {a.size}\u0026#39;) # 元素类型 print(f\u0026#39;dtype: {a.dtype}\u0026#39;) # 元数据 print(f\u0026#39;data: {a.data}\u0026#39;) 数组创建 # 定义数组形状 \u0026gt;\u0026gt;\u0026gt; s = (3, 3) # 创建全为零的数组 \u0026gt;\u0026gt;\u0026gt; np.zeros(s) array([[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]]) # 创建全为一的数组 \u0026gt;\u0026gt;\u0026gt; np.ones(s) array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]) # 创建空数组，元素用随机数填充 \u0026gt;\u0026gt;\u0026gt; np.empty(s) array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]) # 创建一个元素全为123的数组 \u0026gt;\u0026gt;\u0026gt; np.full(s, 123) array([[123, 123, 123], [123, 123, 123], [123, 123, 123]]) # 创建一个九个元素，形状为s的数组 \u0026gt;\u0026gt;\u0026gt; a = np.arange(9).reshape(s) # 创建维度和a相同且元素全为零的数组 \u0026gt;\u0026gt;\u0026gt; np.zeros_like(a) array([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) # 创建维度和a相同且元素全为一的数组 \u0026gt;\u0026gt;\u0026gt; np.ones_like(a) array([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) # 创建维度和a相同的空数组 \u0026gt;\u0026gt;\u0026gt; np.empty_like(a) array([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) # 创建一个维度和a相同且元素全为123的数组 \u0026gt;\u0026gt;\u0026gt; np.full_like(a, 123) array([[123, 123, 123], [123, 123, 123], [123, 123, 123]]) # 创建一个从10到30，且步距为5的数组 \u0026gt;\u0026gt;\u0026gt; np.arange(10, 30, 5) array([10, 15, 20, 25]) # 在10到30之间均匀的创建5个元素的数组 \u0026gt;\u0026gt;\u0026gt; np.linspace(10, 30, 5) array([10., 15., 20., 25., 30.]) 通函数 # 如果全不为0，则为true，否则为false \u0026gt;\u0026gt;\u0026gt; a = [-1, 0, 1, 2, 3] \u0026gt;\u0026gt;\u0026gt; np.all(a) False # 如果全为0，则为false，否则为true \u0026gt;\u0026gt;\u0026gt; np.any(a) True # 返回最大值的索引 \u0026gt;\u0026gt;\u0026gt; a = [1, 2, 6, 4, 5] \u0026gt;\u0026gt;\u0026gt; np.argmax(a) 2 # 返回最小值的索引 \u0026gt;\u0026gt;\u0026gt; np.argmin(a) 0 # 计算最大值 \u0026gt;\u0026gt;\u0026gt; np.max(a) 6 # 计算最小值 \u0026gt;\u0026gt;\u0026gt; np.min(a) 1 # 计算平均值 \u0026gt;\u0026gt;\u0026gt; np.mean(a) 3.6 # 计算方差 \u0026gt;\u0026gt;\u0026gt; np.std(a) 1.8547236990991407 # 计算方差 \u0026gt;\u0026gt;\u0026gt; np.var(a) 3.44 # 计算协方差 \u0026gt;\u0026gt;\u0026gt; np.cov(a, a) array([[4.3, 4.3], [4.3, 4.3]]) # 计算元素总和 \u0026gt;\u0026gt;\u0026gt; np.sum(a) # 计算排序后的下标 \u0026gt;\u0026gt;\u0026gt; np.argsort(a) array([0, 1, 3, 4, 2], dtype=int64) # 返回排序后的数组 \u0026gt;\u0026gt;\u0026gt; np.sort(a) array([1, 2, 4, 5, 6]) # 将元素的值限定在所给的范围内 \u0026gt;\u0026gt;\u0026gt; a = np.arange(10) \u0026gt;\u0026gt;\u0026gt; np.clip(a, 1, 8) array([1, 1, 2, 3, 4, 5, 6, 7, 8, 8]) # 如果a和b都是一维向量，则计算两个向量的内积 # 如果a和b都是n维向量，则计算两个向量的外积 # 计算外积建议使用matmul \u0026gt;\u0026gt;\u0026gt; a = [[1], [2], [3]] \u0026gt;\u0026gt;\u0026gt; b = [[4, 5, 6]] \u0026gt;\u0026gt;\u0026gt; np.dot(a, b) array([[ 4, 5, 6], [ 8, 10, 12], [12, 15, 18]]) # 计算两个矩阵的成绩 \u0026gt;\u0026gt;\u0026gt; np.matmul(a, b) array([[ 4, 5, 6], [ 8, 10, 12], [12, 15, 18]]) # 返回非零元素的下标 \u0026gt;\u0026gt;\u0026gt; a = [0, 1, 2] \u0026gt;\u0026gt;\u0026gt; np.nonzero(a) (array([1, 2], dtype=int64),) # 轴对换函数 \u0026gt;\u0026gt;\u0026gt; a = np.arange(12).reshape(2, 2, 3) \u0026gt;\u0026gt;\u0026gt; np.transpose(a, (0, 2, 1)).shape (2, 3, 2) # 条件成立，输出a，否则输出-1 \u0026gt;\u0026gt;\u0026gt; np.where(a\u0026lt;5, a, -1) array([[[ 0, 1, 2], [ 3, 4, -1]], [[-1, -1, -1], [-1, -1, -1]]]) 线性代数 # 计算矩阵的逆 a = np.arange(4, dtype=float).reshape(2, 2) \u0026gt;\u0026gt;\u0026gt; np.linalg.inv(a) array([[-1.5, 0.5], [ 1. , 0. ]]) # 计算矩阵的迹 \u0026gt;\u0026gt;\u0026gt; np.trace(a) 3.0 # 计算矩阵的特征值和特征向量 \u0026gt;\u0026gt;\u0026gt; np.linalg.eig(a) (array([-0.56155281, 3.56155281]), array([[-0.87192821, -0.27032301], [ 0.48963374, -0.96276969]])) ","date":"2022-01-28T21:12:59+08:00","permalink":"https://lixiaojun2914.github.io/p/numpy/","title":"Numpy笔记"},{"content":"Pyhton语法笔记 列表生成式 # 列表生成式即List Comprehensions, 用来生成特定的列表 # 在列表生成式中，可以使用条件判断语句 # if放在for前面是表达式，可以使用else # if放在for后面是过滤条件，不可使用else [x if x % 2 == 0 else -x for x in range(1, 11)] [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10] # 列表生成式可以嵌套使用 \u0026gt;\u0026gt;\u0026gt; [m + n for m in \u0026#39;ABC\u0026#39; for n in \u0026#39;XYZ\u0026#39;] [\u0026#39;AX\u0026#39;, \u0026#39;AY\u0026#39;, \u0026#39;AZ\u0026#39;, \u0026#39;BX\u0026#39;, \u0026#39;BY\u0026#39;, \u0026#39;BZ\u0026#39;, \u0026#39;CX\u0026#39;, \u0026#39;CY\u0026#39;, \u0026#39;CZ\u0026#39;] 生成器 # 可以和列表生成式类似，使用()代替[]来生成generator \u0026gt;\u0026gt;\u0026gt; g = (x * x for x in range(3)) # 使用next调用generator生成下一个数据 \u0026gt;\u0026gt;\u0026gt; next(g) 0 \u0026gt;\u0026gt;\u0026gt; next(g) 1 # 使用for遍历generator \u0026gt;\u0026gt;\u0026gt; for n in g: ... print(n) ... 0 1 4 # 在函数中可使用yield生成generator，yield和return类似。 # 下次函数调用会从yield以后开始执行，且此时的yield返回为None。 # 可以使用send来让yield返回特定的值。 \u0026gt;\u0026gt;\u0026gt; def test(x): ... while True: ... y = yield x ... if y == None: ... x = x + 1 ... else: ... x = y ... \u0026gt;\u0026gt;\u0026gt; g = test(10) \u0026gt;\u0026gt;\u0026gt; next(g) 10 \u0026gt;\u0026gt;\u0026gt; next(g) 11 \u0026gt;\u0026gt;\u0026gt; g.send(1) 1 \u0026gt;\u0026gt;\u0026gt; next(g) 2 函数式编程 map \u0026gt;\u0026gt;\u0026gt; def f(x): ... return x * x ... \u0026gt;\u0026gt;\u0026gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9]) \u0026gt;\u0026gt;\u0026gt; list(r) [1, 4, 9, 16, 25, 36, 49, 64, 81] reduce \u0026gt;\u0026gt;\u0026gt; def add(x, y): ... return x + y ... \u0026gt;\u0026gt;\u0026gt; reduce(add, [1, 3, 5, 7, 9]) 25 filter \u0026gt;\u0026gt;\u0026gt; def is_odd(n): ... return n % 2 == 1 ... \u0026gt;\u0026gt;\u0026gt; list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15])) [1, 5, 9, 15] lambda \u0026gt;\u0026gt;\u0026gt; f = lambda x: x * x \u0026gt;\u0026gt;\u0026gt; f \u0026lt;function \u0026lt;lambda\u0026gt; at 0x101c6ef28\u0026gt; \u0026gt;\u0026gt;\u0026gt; f(5) 25 装饰器 from functools import wraps # 定义装饰器函数 # 参数为要装饰的函数 # 返回装饰后的函数 def square(func): def wrap_func(a, b): c = func(a, b) return pow(c, 2) return wrap_func # 使用wraps装饰器包装装饰器函数 # 使用wraps后，被装饰的函数的__name__属性返回被装饰的函数名称而不是装饰器函数 def square2(func): @wraps(func) def decorated(a, b): c = func(a, b) return pow(c, 2) return decorated @square def add(a, b): return a + b print(add(1, 2)) print(add.__name__) @square2 def add(a, b): return a + b print(add(1, 2)) print(add.__name__) # output: 9 wrap_func 9 add 自带装饰器函数 @property class C: def __init__(self): self._x = None @property def x(self): return self._x @x.setter def x(self, value): self._x = value @x.deleter def x(self): del self._x c = C() c.x = 123 print(c.x) del c.x # output 123 @classmethod class A: number = 10 @classmethod def get_a(cls): # cls 接收的是当前类，类在使用时会将自身传入到类方法的第一个参数 print(\u0026#39;这是类本身：\u0026#39;, cls) # 如果子类调用，则传入的是子类 print(\u0026#39;这是类属性:\u0026#39;, cls.number) class B(A): number = 20 pass # 调用类方法 不需要实例化可以执行调用类方法 A.get_a() B.get_a() # output 这是类本身： \u0026lt;class \u0026#39;__main__.A\u0026#39;\u0026gt; 这是类属性: 10 这是类本身： \u0026lt;class \u0026#39;__main__.B\u0026#39;\u0026gt; 这是类属性: 20 @staticmethod class A: @staticmethod def static_func(): print(\u0026#39;class name: \u0026#39;, A.__name__) class B(A): pass A.static_func() B.static_func() # output class name: A class name: A 偏函数 \u0026gt;\u0026gt;\u0026gt; import functools \u0026gt;\u0026gt;\u0026gt; int2 = functools.partial(int, base=2) \u0026gt;\u0026gt;\u0026gt; int2(\u0026#39;1000000\u0026#39;) 64 \u0026gt;\u0026gt;\u0026gt; int2(\u0026#39;1010101\u0026#39;) 85 ","date":"2022-01-28T21:12:48+08:00","permalink":"https://lixiaojun2914.github.io/p/python/","title":"Python笔记"},{"content":"hugo博客搭建过程 安装hugo choco install hugo-extended -confirm 安装stack主题 hugo new site blog cd blog git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack cp -r themes/hugo-theme-stack/exampleSite/content ./content cp themes/hugo-theme-stack/config.yaml ./config.yaml 修改配置文件 baseurl:https://lixiaojun2914.github.iolanguageCode:zh-cntheme:hugo-theme-stackpaginate:5title:My Blog# Change it to your Disqus shortname before usingdisqusShortname:hugo-theme-stack# EmojienableEmoji:true# GA Tracking IDgoogleAnalytics:# Theme i18n support# Available values: en, fr, id, ja, ko, pt-br, zh-cn, zh-tw, es, de, nl, it, th, el, ukDefaultContentLanguage:zh-cn# Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko]# This will make .Summary and .WordCount behave correctly for CJK languages.hasCJKLanguage:falsepermalinks:post:/p/:slug/page:/:slug/params:mainSections:- postfeaturedImageField:imagerssFullContent:truefavicon:footer:since:2020customText:dateFormat:published:Jan 02, 2006lastUpdated:Jan 02, 2006 15:04 MSTsidebar:emoji:🍥subtitle:Lorem ipsum dolor sit amet, consectetur adipiscing elit.avatar:enabled:truelocal:truesrc:img/avatar.pngarticle:math:truetoc:truereadingTime:truelicense:enabled:truedefault:Licensed under CC BY-NC-SA 4.0comments:enabled:trueprovider:walinedisqusjs:shortname:apiUrl:apiKey:admin:adminLabel:utterances:repo:issueTerm:pathnamelabel:remark42:host:site:locale:vssue:platform:owner:repo:clientId:clientSecret:autoCreateIssue:false# Waline client configuration see: https://waline.js.org/en/reference/client.htmlwaline:serverURL:https://blog-waline-lixiaojun2914.vercel.applang:zh-CNvisitor:trueavatar:emoji:- https://cdn.jsdelivr.net/gh/walinejs/emojis/weiborequiredMeta:- name- emailplaceholder:locale:admin:Admintwikoo:envId:region:path:lang:# See https://cactus.chat/docs/reference/web-client/#configuration for description of the various optionscactus:defaultHomeserverUrl:\u0026#34;https://matrix.cactus.chat:8448\u0026#34;serverName:\u0026#34;cactus.chat\u0026#34;siteName:\u0026#34;\u0026#34;# You must insert a unique identifier here matching the one you registered (See https://cactus.chat/docs/getting-started/quick-start/#register-your-site)giscus:repo:repoID:category:categoryID:mapping:lightTheme:darkTheme:reactionsEnabled:1emitMetadata:0gitalk:owner:admin:repo:clientID:clientSecret:cusdis:host:id:widgets:enabled:- search- archives- tag-cloudarchives:limit:5tagCloud:limit:10opengraph:twitter:# Your Twitter usernamesite:# Available values: summary, summary_large_imagecard:summary_large_imagedefaultImage:opengraph:enabled:falselocal:falsesrc:colorScheme:# Display toggletoggle:true# Available values: auto, light, darkdefault:autoimageProcessing:cover:enabled:truecontent:enabled:true### Custom menu### See https://docs.stack.jimmycai.com/configuration/custom-menu.html### To remove about, archive and search page menu item, remove `menu` field from their FrontMattermenu:main:- identifier:homename:Homeurl:/weight:-100params:### For demonstration purpose, the home link will be open in a new tabnewTab:trueicon:homesocial:- identifier:githubname:GitHuburl:https://github.com/lixiaojun2914params:icon:brand-githubrelated:includeNewer:truethreshold:60toLower:falseindices:- name:tagsweight:100- name:categoriesweight:200markup:goldmark:renderer:## Set to true if you have HTML content inside Markdownunsafe:falsetableOfContents:endLevel:4ordered:truestartLevel:2highlight:noClasses:false添加文章 hugo new post/new_article/index.md --- title: \u0026#34;测试文章\u0026#34; description: \u0026#34;文章简介\u0026#34; date: \u0026#34;2020-08-10 01:00:00+0200\u0026#34; slug: \u0026#34;test-post\u0026#34; image: \u0026#34;cover.jpg\u0026#34; categories: - 博客 tags: - Hugo - Stack --- ![图片 1](Design-V1.jpg) ![图片 2](Design-V2.jpg) 生成静态文件 hugo -D ","date":"2022-01-28T00:00:00Z","permalink":"https://lixiaojun2914.github.io/p/test-post/","title":"Hugo Blog搭建过程"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n bilibilibi Shortcode \r","date":"2019-03-10T00:00:00Z","permalink":"https://lixiaojun2914.github.io/p/rich-content/","title":"Rich Content"},{"content":"string.h string.h中定义了各种操作字符数组的函数，分为以mem开头和以str开头的两种。以mem开头的函数以给定长度为标准对字符串内存进行操作，以str开头的函数，以'\\0\u0026rsquo;为结尾对字符数组进行操作。\nchr结尾的函数 //在参数str所指向的字符串内存的前n个字节中搜索第一次出现字符c的位置 void *memchr(const void *str, int c, size_t n) //在参数str所指向的字符串中搜索第一次出现字符c的位置 char *strchr(const char *str, int c) //在参数str所指向的字符串中搜索最后一次出现字符c的位置 char *strrchr(const char *str, int c) cpy结尾的函数 //从src复制n个字符到dest void *memcpy(void *dest, const void *src, size_t n) //把src所指向的字符串复制到dest char *strcpy(char *dest, const char *src) //把src所指向的字符串复制到dest，最多复制n个字符 char *strncpy(char *dest, const char *src, size_t n) 在使用cpy函数时，一定要注意判断源字符串和目的字符串的长度，否则会发生缓冲区溢出。\ncmp结尾的函数 //把str1和str2的前n个字节进行比较 int memcmp(const void *str1, const void *str2, size_t n) //把str1所指向的字符串和str2所指向的字符串进行比较 int strcmp(const char *str1, const char *str2) //把str1和str2进行比较，最多比较前n个字节 int strncmp(const char *str1, const char *str2, size_t n) 以cat结尾的函数 //把src所指向的字符串追加到dest所指向的字符串的结尾 char *strcat(char *dest, const char *src) //把src所指向的字符串追加到dest 所指向的字符串的结尾，直到n字符长度为止 char *strncat(char *dest, const char *src, size_t n) memset //复制字符c到参数str所指向的字符串的前n个字符 void *memset(void *str, int c, size_t n) 使用memset填充数组时，应当理解memset是以字节为单位进行赋值的，例如memset(a,1,20),若a为int数组，在32位计算机中，a中每个数组元素的值都为0x01010101,即16843009\nstrlen //计算字符串 str 的长度，直到空结束字符，但不包括空结束字符 size_t strlen(const char *str) strstr //在字符串str中查找第一次出现字符串needle（不包含空结束字符）的位置。 char *strstr(const char *str, const char *dest) ","date":"2019-02-14T00:00:00Z","image":"https://lixiaojun2914.github.io/p/c-lang/006w8JsJly4gv4r2dpemlj61ao0t6agw02_hua6b594638f131ef4e85371ed1871a804_262441_120x120_fill_q75_box_smart1.jpg","permalink":"https://lixiaojun2914.github.io/p/c-lang/","title":"C语言标准库常用字符串处理函数"},{"content":"安装node.js apt-get -y install nodejs 安装git apt-get -y install git 安装nginx apt-get -y install nginx 安装hexo npm install -g hexo-cli 配置hexo  新建hexo项目  mkdir ~/bash hexo init ~/bash cd ~/bash npm install  安装indigo主题  # 下载主题 git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo # 安装相关依赖 npm install hexo-renderer-less --save npm install hexo-generator-feed --save npm install hexo-generator-json-content --save npm install hexo-helper-qrcode --save # 开启tags页面 hexo new page tags  配置hexo的_config.yml 以下只列出修改的位置  # 设置博客相关信息title:夜航的小王子subtitle:记录学习的技能和遇到的问题description:keywords:author:Li Xiaojunlanguage:zh-Hanstimezone:Asia/Shanghai# URLurl:http://www.lixiaojun.tkemail:982090951@qq.comroot:/permalink::year/:month/:day/:title/permalink_defaults:# 主题配置theme:indigofeed:type:atompath:atom.xmllimit:0jsonContent:meta:falsepages:falseposts:title:truedate:truepath:truetext:trueraw:falsecontent:falseslug:falseupdated:falsecomments:falselink:falsepermalink:falseexcerpt:falsecategories:falsetags:true# 部署到gitdeploy:type:gitrepo:https://github.com/lixiaojun2914/blog.git 配置themes/indigo目录的_config.yml 以下只列出修改的位置  配置导航栏menu:home:text:主页url:/archives:text:文章url:/archivestags:text:标签url:/tags# th-list:# text: 分类# url: /categoriesgithub:url:https://github.com/lixiaojun2914target:_blank# weibo:# url: http://www.weibo.com/ysweb# target: _blank# link:# text: 管理# url: /admin# 你的头像urlavatar:/img/avatar.jpg# avatar linkavatar_link:/# 头像背景图brand:/img/brand.jpg# faviconfavicon:/favicon.ico# emailemail:982090951@qq.com# 是否开启打赏，关闭 reward: falsereward:false# 配置valine评论系统valine:enable:true# 如果你想使用valine，请将值设置为 trueappId:your appid# your leancloud appIdappKey:your appkey# your leancloud appKeynotify:false# Mail notifyverify:false# Verify codeavatar: mm # Gravatar style :mm/identicon/monsterid/wavatar/retro/hideplaceholder:ヾﾉ≧∀≦)o来啊，快活啊! # Comment Box placeholderguest_info:nick,mail,link# Comment header infopageSize:10# comment list page size 配置source/tags/index.md  ---\rtitle: Tags\rdate: 2019-01-20 08:19:25\rlayout: tags\rcomments: false # 关闭tags的评论\r---\r配置/etc/nginx/nginx.conf # user www-data; user root; worker_processes auto; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf; events { worker_connections 768; # multi_accept on; } http { ## \t# Basic Settings \t##  sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; # server_tokens off;  # server_names_hash_bucket_size 64; \t# server_name_in_redirect off;  include /etc/nginx/mime.types; default_type application/octet-stream; ## \t# SSL Settings \t##  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE \tssl_prefer_server_ciphers on; ## \t# Logging Settings \t##  access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ## \t# Gzip Settings \t##  gzip on; # 注释下面两行,否则默认显示nginx导航页 \t#include /etc/nginx/conf.d/*.conf; \t#include /etc/nginx/sites-enabled/*; \tserver { # server_name 127.0.0.1; \tlocation / { root /root/blog/public; # 渲染后的静态页面所在位置 \tindex index.html; # 启动后显示的主页面 \t} } } 启动nginx服务 service nginx start 新建文章 方法一：使用命令\nhexo new 文章名 方法2： 直接在source/_posts内新建一个 文章名.md 文件\n生成页面并保存 hexo g -d ","date":"2019-01-21T00:00:00Z","image":"https://lixiaojun2914.github.io/p/%E5%93%88%E5%93%88%E5%93%88%E5%93%88/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://lixiaojun2914.github.io/p/%E5%93%88%E5%93%88%E5%93%88%E5%93%88/","title":"hexo-indigo+github+nginx博客搭建过程"}]